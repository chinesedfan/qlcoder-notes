const data = [
    [' ', 100], [',', 7], ['.', 10], ['a', 36], ['b', 3], ['c', 8], ['d', 18],
    ['e', 42], ['f', 6], ['g', 13], ['h', 40], ['i', 31], ['j', 1], ['k', 3],
    ['l', 25], ['m', 11], ['n', 36], ['o', 23], ['p', 3], ['q', 1], ['r', 20],
    ['s', 25], ['t', 45], ['u', 3], ['v', 1], ['w', 14], ['x', 1], ['y', 5],
    ['z', 1]
];

const sorted = data
    .map((arr) => ({key: arr[0], val: arr[1]}))
    .sort((a, b) => a.val - b.val); // incremental
const same = []; // whose left and right has the same weight

while (sorted.length > 1) {
    // merge
    const a = sorted.shift();
    const b = sorted.shift();
    const c = {val: a.val + b.val, left: a, right: b};
    if (c.left.val === c.right.val) {
        same.push(c);
    }

    // insert
    let i = 0;
    while (i < sorted.length && sorted[i].val <= c.val) i++;
    sorted.splice(i, 0, c);
}

const code

// loop all possible trees
let kind = 0;
const max = Math.pow(2, same.length);
while (kind < max) {
    console.log(`Case ${kind}:`);
    swap();
    print();
    swap(); // recover

    kind++;
}

function swap() {
    for (let i = 0; i < same.length; i++) {
        if (kind & (1 << i)) {
            const tmp = same[i].right;
            same[i].right = same[i].left;
            same[i].left = tmp;
        }
    }
}

function print() {
    const result = [];

    let n = sorted[0];
    for (let i = 0; i < code.length; i++) {
        n = code[i] === '0' ? n.left : n.right;
        if (n.key) {
            result.push(n.key);
            n = sorted[0];
        }
    }
    console.log(result.join(''));
}
